@startuml
/'title Inicialización
skinparam responseMessageBelowArrow true
skinparam monochrome true
skinparam style strictuml
hide footbox

Actor actor
participant juego as ":Juego"
participant jug as "Jugador"
participant pais as ":Pais"

actor ++
actor -> juego ++: agregarPaises(paises)

actor -> juego: inicializar()

loop para cada pais
    juego -> jug: ocupar(pais)
    juego -> pais: ocupadoPor(jugador, 1)
end loop
'/

title Inicialización
skinparam responseMessageBelowArrow true
skinparam monochrome true
skinparam style strictuml
hide footbox

Actor actor
participant juego as ":Juego"
participant mapa as ":Mapa"
participant jug as "Jugador"
participant pais as ":Pais"
participant turnos as ":Turnos"
participant tarjeta as ":Tarjeta"
actor ++
actor -> juego++: inicializar(cantJugadores:int, \n archivoPaises:String,\n archivoObjetivos:String, \n archivoTarjetas:String)

loop para cada jugador
    juego -> jug: <<create>>(numJugador:int)
end loop

juego -> mapa++: <<create>>(continentes:dict)

loop para cada pais
    mapa -> pais: <<create>>(nombre:str, continente:str, limitrofes:str)
end loop
mapa--

juego -> juego++: crearTarjetas(archivoTarjetas:String)
loop para cada tarjeta
juego -> tarjeta: <<create>>(pais:Pais, simbolo:Simbolo)
end loop
juego--

juego -> turnos: <<create>>(jugadores:ArrayList)


juego -> mapa++: repartirPaises(jugadores:Jugador)
juego--

loop para cada pais
    mapa -> pais++: ocupadoPor(jugador:Juagdor, 1)
    pais -> jug++: ocupar(pais:Pais)
    jug--
end loop
mapa--
pais--

juego -> juego++: crearObjetivos()
juego -> ":ObjetivoComun": <<create>>(cant:int, mapa:Mapa)
loop por cada objetivo ocupacion
juego -> ":ObjetivoOcupacion": <<create>>(cantidadesPorContinente:HashMap, mapa:Mapa)
end loop
loop por cada objetivo destruccion
juego -> ":ObjetivoDestruccion": <<create>>(numJugador:int, mapa:Mapa)
end loop
juego--

juego -> juego++: repartirObjetivos()
loop por cada jugador
juego -> jug: asignarObjetivos(objetivoComun:ObjetivoComun, objetivoSecreto:Objetivo)
end loop
juego--

@enduml